<script type="module">

    class Option {
        constructor(
            id,
            name,
            isOthers,
            isRejection
        ) {
            this.id = id;
            this.name = name;
            this.isOthers = isOthers;
            this.isRejection = isRejection;
        }
    }

    class ControlProperties {
        constructor(
            canAttach,
            canEmplazar,
            options
        ) {
            this.hasAttachment = canAttach;
            this.hasEmplazamiento = canEmplazar;
            this.options = options;
        }
    }



    class ModalState {
        constructor(
            showRejectionAction,
            // mostrar modal para especificar a que se refiere con otros
            showOtros,
            showEmplazamientoConfirm,
            showSancionConfirm
        ) {
            this.showAttachment = showAttachment;
            this.showOtros = showOtros;
            this.showRejectionAction = showRejectionAction;
            this.showEmplazamientoConfirm = showEmplazamientoConfirm;
            this.showSancionConfirm = showSancionConfirm;
        }
    }


    class ModalManager {

        constructor(dto) {
            this.modals = []; // stack of modals
            this.state = this.initialState(dto);
        }

        initialState(dto) {
            return new ModalState(
                dto.hasAttachment,
                dto.hasOtros,
                dto.hasRejection,
                dto.hasEmplazamiento,
                dto.hasSancion
            );
        }

        evaluateSelections(selections) {
            // evaluamos las opciones selecionadas y actualizamos el estado de los modales
            // si se selecciona una opciÃ³n, se muestra el modal correspondiente
            this.state.isothersIsSelected = selections.includes(opt => opt.isOthers === 'otros');
            const rejectionIsSelected = selections.includes(opt => opt.isRejection === 'rejection');
        }

    }

</script>