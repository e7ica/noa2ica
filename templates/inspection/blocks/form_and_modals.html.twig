<div class="max-w-4xl mt-6 mx-auto p-6 bg-white rounded-lg shadow-lg">
    <h1 class="text-xl font-semibold text-gray-700">{{ question.label }}</h1>

    <form
            class="mt-6 relative"
            method="post"
            action="{{
            path('inspection_form_step', {
                'inspection_id': inspection_id,
                'step': step}
            )
            }}">

        {% if question.status != 'Pendiente' %}
            <div class="absolute s-8 top-[-140px] right-[-35px] md:top-[-100px] md:right-[-40px]">
                <div class="flex items-center justify-center w-20 h-20 md:s-12 border-4 md:border-8 border-gray-700 rounded-full {{ question.status == 'Aprobado' ? 'bg-green-500' : 'bg-red-500' }}">
            <span class="text-4xl font-bold {{ question.status == 'Aprobado' ? 'text-white' : 'text-white' }}">
                {{ question.status == 'Aprobado' ? '👍' : '👎' }}
            </span>
                </div>
            </div>
        {% endif %}


        {#  if question.can_attach #}
            {% include '/inspection/partials/_comprobante_modal.html.twig' %}
        {# endif #}
        {#  if question.can_select_others #}
            {% include './inspection/partials/_otros_modal.html.twig' %}
        {# endif #}
        {# if question.can_summon #}
            {% include './inspection/partials/_summons_modal.html.twig' %}
        {# endif #}
        {% include './inspection/partials/_infractions_and_closure_modal.html.twig' %}
        {% include './inspection/partials/_continue_modal.html.twig' %}

        <div class="space-y-4">
            {% if question.type == 'yes_no' %}
                {% for option in question.options %}
                    <div class="flex items-center">
                        <input type="radio" id="{{ question.ref }}_{{ loop.index }}" name="{{ question.ref }}" value="{{ option.value }}" class="form-radio h-5 w-5 text-blue-600">
                        <label for="{{ question.ref }}_{{ loop.index }}" class="ml-3 text-sm text-gray-600">{{ option.label }}</label>
                    </div>
                {% endfor %}

            {% elseif question.type == 'multiple_choice' %}
                {% for option in question.options %}
                    <div class="flex items-center">
                        <input type="checkbox" id="{{ question.ref }}_{{ loop.index }}" name="{{ question.ref }}" value="{{ option.value }}" class="form-checkbox h-5 w-5 text-blue-600">
                        <label for="{{ question.ref }}_{{ loop.index }}" class="ml-3 text-sm text-gray-600">{{ option.label }}</label>
                    </div>
                {% endfor %}
            {% endif %}
        </div>

        <div class="mt-6 flex justify-between">
            {% if step > 0 %}
                <a href="{{ path('inspection_form_step', {'inspection_id': inspection_id, 'step': step - 1}) }}" class="inline-flex items-center px-6 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm font-medium rounded-full shadow-md transition duration-300 ease-in-out">
                    Anterior
                </a>
            {% endif %}

            <button type="button" id="nextBtn" class="inline-flex items-center px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium rounded-full shadow-md transition duration-300 ease-in-out">
                Siguiente
            </button>
        </div>

    </form>
</div>


<script type="module">
    // Configuración inicial
    function setupListeners() {
        document.getElementById('nextBtn').addEventListener('click', handleNextBtnClick);
        document.getElementById('otrosContinuarBtn').addEventListener('click', () => handleModalContinueClick('otrosModal', handleOtrosContinuar));
        document.getElementById('uploadWrapper').addEventListener('click', handleUploadWrapperClick);
        document.getElementById('fileInput').addEventListener('change', handleFileInputChange);
        document.getElementById('continuarBtn').addEventListener('click', () => handleModalContinueClick('comprobanteModal', handleComprobanteContinue));
    }

    // Manejar el clic en el botón "Siguiente"
    function handleNextBtnClick(event) {
        const canSelectOthers = {{ question.can_select_others | json_encode() | raw }};
        const canAttachFile = {{ question.can_attach | json_encode() | raw }};
        const selectedOption = document.querySelector(`input[name="{{ question.ref }}"]:checked`);
        const otrosOption = "otros"; // Reemplaza con el valor específico de "Otros"

        if (canSelectOthers && selectedOption && selectedOption.value === otrosOption) {
            event.preventDefault();
            toggleModalVisibility('otrosModal', true);
        } else {
            if (canAttachFile) {
                event.preventDefault();
                toggleModalVisibility('comprobanteModal', true);
            } else {
                document.querySelector('form').submit();
            }
        }

    }

    // Función que maneja la lógica al presionar "Continuar" en cualquier modal
    function handleModalContinueClick(modalId, callback) {
        const modal = document.getElementById(modalId);
        if (callback && typeof callback === 'function') {
            callback();
        }
        toggleModalVisibility(modalId, false);
    }

    // Lógica para cuando se presiona "Continuar" en el modal de "Otros"
    function handleOtrosContinuar() {
        const canAttachFile = {{ question.can_attach | json_encode() | raw }};
        const otrosInput = document.getElementById('otrosInput').value.trim();
        if (otrosInput === "") {
            alert("Por favor, especifique qué significa 'Otros'.");
            return;
        }
        if (canAttachFile) {
            toggleModalVisibility('comprobanteModal', true);
        } else {
            document.querySelector('form').submit();
        }
    }

    // Lógica para cuando se presiona "Continuar" en el modal de comprobante
    function handleComprobanteContinue() {
        document.querySelector('form').submit();
    }

    // Manejar el clic en el botón "Upload"
    function handleUploadWrapperClick() {
        document.getElementById('fileInput').click();
    }

    // Manejar el cambio en el input de archivo
    function handleFileInputChange() {
        const continuarBtn = document.getElementById('continuarBtn');
        const uploadIcon = document.getElementById('uploadIcon');
        const uploadWrapper = document.getElementById('uploadWrapper');
        const hasFiles = this.files.length > 0;

        toggleUploadState(hasFiles, continuarBtn, uploadIcon, uploadWrapper);
    }

    // Mostrar u ocultar un modal
    function toggleModalVisibility(modalId, show) {
        const modal = document.getElementById(modalId);
        if (show) {
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        } else {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
    }

    // Cambiar el estado del botón "Continuar" y del ícono de subida
    function toggleUploadState(hasFiles, continuarBtn, uploadIcon, uploadWrapper) {
        if (hasFiles) {

            continuarBtn.textContent = 'Continuar';
            continuarBtn.classList.add('bg-green-500', 'text-white', 'hover:bg-green-600', 'rounded-full', 'shadow-md', 'transition', 'duration-300', 'ease-in-out');
            continuarBtn.classList.remove('text-blue-500', 'hover:bg-blue-700');

            uploadIcon.classList.replace('fa-paperclip', 'fa-check-circle');
            uploadIcon.classList.replace('text-gray-500', 'text-green-500');
            uploadWrapper.classList.add('bg-green-50', 'border-green-500');
            uploadWrapper.classList.remove('border-gray-300');

        } else {

            continuarBtn.textContent = 'No, gracias. Continuar';
            continuarBtn.classList.remove('bg-blue-700', 'text-white', 'hover:bg-green-700');
            continuarBtn.classList.add('bg-blue-600', 'text-blue-500', 'hover:bg-blue-700');

            uploadIcon.classList.replace('fa-check-circle', 'fa-paperclip');
            uploadIcon.classList.replace('text-green-500', 'text-gray-500');
            uploadWrapper.classList.remove('bg-green-50');
            uploadWrapper.classList.add('border-gray-300');
        }
    }

    // Inicializar
    setupListeners();
</script>
